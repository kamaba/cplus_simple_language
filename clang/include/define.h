#ifndef SIMPLE_LANGUAGE_DEFINE_H
#define SIMPLE_LANGUAGE_DEFINE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>

// 前置权限
typedef enum {
    PERMISSION_NULL = 0,
    PERMISSION_EXPORT,
    PERMISSION_PUBLIC,
    PERMISSION_PROTECTED,
    PERMISSION_PRIVATE
} EPermission;

// 前置类型
typedef enum {
    TYPE_NONE = 0,
    TYPE_NULL,
    TYPE_VOID,
    TYPE_CLASS,
    TYPE_ENUM,
    TYPE_DATA,
    TYPE_BOOLEAN,
    TYPE_BIT,
    TYPE_BYTE,
    TYPE_SBYTE,
    TYPE_INT16,
    TYPE_UINT16,
    TYPE_INT32,
    TYPE_UINT32,
    TYPE_FLOAT32,
    TYPE_INT64,
    TYPE_UINT64,
    TYPE_FLOAT64,
    TYPE_INT128,
    TYPE_UINT128,
    TYPE_ARRAY,
    TYPE_RANGE,
    TYPE_STRING,
    TYPE_OBJECT,
    TYPE_FLOAT2,
    TYPE_FLOAT3,
    TYPE_FLOAT4,
    TYPE_FLOAT2X2,
    TYPE_FLOAT2X3,
    TYPE_FLOAT3X2,
    TYPE_FLOAT3X3,
    TYPE_FLOAT4X2,
    TYPE_FLOAT4X3,
    TYPE_FLOAT4X4,
    TYPE_FLOAT2X4,
    TYPE_FLOAT3X4,
    TYPE_DOUBLE2,
    TYPE_DOUBLE3,
    TYPE_DOUBLE4,
    TYPE_DOUBLE2X2,
    TYPE_DOUBLE2X3,
    TYPE_DOUBLE3X2,
    TYPE_DOUBLE3X3,
    TYPE_DOUBLE4X2,
    TYPE_DOUBLE4X3,
    TYPE_DOUBLE4X4,
    TYPE_DOUBLE2X4,
    TYPE_DOUBLE3X4,
    TYPE_MATRIX2X2,
    TYPE_MATRIX2X3,
    TYPE_MATRIX3X2,
    TYPE_MATRIX3X3,
    TYPE_MATRIX4X2,
    TYPE_MATRIX2X4,
    TYPE_MATRIX3X4,
    TYPE_MATRIX4X3,
    TYPE_MATRIX4X4,
    TYPE_FINISHED
} EType;

// Token类型
typedef enum {
    TOKEN_NONE = 0,
    TOKEN_VOID,
    TOKEN_TYPE,
    TOKEN_LEFT_BRACE,
    TOKEN_RIGHT_BRACE,
    TOKEN_LEFT_PAR,
    TOKEN_RIGHT_PAR,
    TOKEN_LEFT_BRACKET,
    TOKEN_RIGHT_BRACKET,
    TOKEN_PERIOD,
    TOKEN_AT,
    TOKEN_DOLLAR,
    TOKEN_ADDRESS,
    TOKEN_COMMA,
    TOKEN_COLON,
    TOKEN_SEMICOLON,
    TOKEN_LINE_END,
    TOKEN_QUESTION_MARK,
    TOKEN_EMPTY_RET,
    TOKEN_QUESTION_MARK_DOT,
    TOKEN_PLUS,
    TOKEN_DOUBLE_PLUS,
    TOKEN_PLUS_ASSIGN,
    TOKEN_MINUS,
    TOKEN_DOUBLE_MINUS,
    TOKEN_MINUS_ASSIGN,
    TOKEN_MULTIPLY,
    TOKEN_MULTIPLY_ASSIGN,
    TOKEN_DIVIDE,
    TOKEN_DIVIDE_ASSIGN,
    TOKEN_MODULO,
    TOKEN_MODULO_ASSIGN,
    TOKEN_INCLUSIVE_OR,
    TOKEN_INCLUSIVE_OR_ASSIGN,
    TOKEN_OR,
    TOKEN_COMBINE,
    TOKEN_COMBINE_ASSIGN,
    TOKEN_AND,
    TOKEN_XOR,
    TOKEN_XOR_ASSIGN,
    TOKEN_NEGATIVE,
    TOKEN_SHI,
    TOKEN_SHR,
    TOKEN_SHARP,
    TOKEN_NOT,
    TOKEN_ASSIGN,
    TOKEN_EQUAL,
    TOKEN_VALUE_EQUAL,
    TOKEN_NOT_EQUAL,
    TOKEN_VALUE_NOT_EQUAL,
    TOKEN_GREATER,
    TOKEN_GREATER_OR_EQUAL,
    TOKEN_LESS,
    TOKEN_LESS_OR_EQUAL,
    TOKEN_NUMBER_ARRAY_LINK,
    TOKEN_PARAMS,
    TOKEN_LAMBDA,
    TOKEN_IF,
    TOKEN_ELSE,
    TOKEN_ELSE_IF,
    TOKEN_MACRO_IF,
    TOKEN_MACRO_ELSE,
    TOKEN_MACRO_ENDIF,
    TOKEN_IMPORT,
    TOKEN_AS,
    TOKEN_IS,
    TOKEN_SWITCH,
    TOKEN_CASE,
    TOKEN_DEFAULT,
    TOKEN_EXTERN,
    TOKEN_PUBLIC,
    TOKEN_PROJECTED,
    TOKEN_PRIVATE,
    TOKEN_INTERFACE,
    TOKEN_EXTENDS,
    TOKEN_OVERRIDE,
    TOKEN_CONST,
    TOKEN_MUT,
    TOKEN_FINAL,
    TOKEN_STATIC,
    TOKEN_GET,
    TOKEN_SET,
    TOKEN_LET,
    TOKEN_NEW,
    TOKEN_PARTIAL,
    TOKEN_NAMESPACE,
    TOKEN_CLASS,
    TOKEN_ENUM,
    TOKEN_DATA,
    TOKEN_DYNAMIC,
    TOKEN_BREAK,
    TOKEN_NEXT,
    TOKEN_CONTINUE,
    TOKEN_GOTO,
    TOKEN_TRANSIENCE,
    TOKEN_RETURN,
    TOKEN_GLOBAL,
    TOKEN_LABEL,
    TOKEN_WHILE,
    TOKEN_DO_WHILE,
    TOKEN_FOR,
    TOKEN_IN,
    TOKEN_FUNCTION,
    TOKEN_TRY,
    TOKEN_CATCH,
    TOKEN_THROW,
    TOKEN_BOOL_VALUE,
    TOKEN_NUMBER,
    TOKEN_STRING,
    TOKEN_NULL,
    TOKEN_VAR,
    TOKEN_OBJECT,
    TOKEN_THIS,
    TOKEN_BASE,
    TOKEN_ARRAY,
    TOKEN_RANGE,
    TOKEN_BOOLEAN,
    TOKEN_COMPLEX,
    TOKEN_IDENTIFIER,
    TOKEN_FINISHED
} ETokenType;

// 操作符类型
typedef enum {
    OP_PLUS,
    OP_MINUS,
    OP_MULTIPLY,
    OP_DIVIDE,
    OP_MODULO,
    OP_INCLUSIVE_OR,
    OP_OR,
    OP_COMBINE,
    OP_AND,
    OP_XOR,
    OP_NEGATIVE,
    OP_SHI,
    OP_SHR,
    OP_NOT
} EOpSign;

// 解析状态
typedef enum {
    PARSE_STATE_NULL = 0,
    PARSE_STATE_BEGIN,
    PARSE_STATE_END
} EParseState;

// 节点类型
typedef enum {
    NODE_NONE,
    NODE_ROOT,
    NODE_BRACE,
    NODE_LEFT_ANGLE,
    NODE_RIGHT_ANGLE,
    NODE_PAR,
    NODE_BRACKET,
    NODE_SYMBOL,
    NODE_PERIOD,
    NODE_COMMA,
    NODE_SEMICOLON,
    NODE_LINE_END,
    NODE_ASSIGN,
    NODE_CONST_VALUE,
    NODE_PREFIX_AT_SYMBOL,
    NODE_PREFIX_DOLLAR_SYMBOL,
    NODE_IDENTIFIER_LINK,
    NODE_KEY,
    NODE_END
} ENodeType;

// 类定义类型
typedef enum {
    CLASS_DEFINE_STRUCT,
    CLASS_DEFINE_INNER,
    CLASS_DEFINE_CODE
} EClassDefineType;

// 引用来源类型
typedef enum {
    REF_FROM_LOCAL,
    REF_FROM_CSHARP,
    REF_FROM_JAVASCRIPT
} RefFromType;

// 操作符优先级
#define PRIORITY_LEVEL1 1                    // (a+b) [] . 优先操作，对象操作等
#define PRIORITY_LEVEL2_LINK_OP 2            // -负号 (int)强转 ++x x++ -- ! ~ 
#define PRIORITY_LEVEL3_HIGHT_COMPUTE 3      // / * % 
#define PRIORITY_LEVEL3_LOW_COMPUTE 4        // + - 
#define PRIORITY_LEVEL5_BIT_MOVE_OP 5        // << >> 
#define PRIORITY_LEVEL6_COMPARE 6            // < > <= >=
#define PRIORITY_LEVEL7_EQUAL_AB 7           // == !=
#define PRIORITY_LEVEL8_BIT_AND_OP 81        // &
#define PRIORITY_LEVEL8_BIT_XOR_OP 82        // ^
#define PRIORITY_LEVEL8_BIT_OR_OP 83         // |
#define PRIORITY_LEVEL9_AND 91               // &&
#define PRIORITY_LEVEL9_OR 92                // ||
#define PRIORITY_LEVEL10_THIRD_OP 100        // ? : 
#define PRIORITY_LEVEL11_ASSIGN 120          // = /= *= %= += -= <<= >>= &= ^= |= 
#define PRIORITY_LEVEL12_SPLIT 130           // ,

// 全局常量
#define TAB_CHAR "    "
#define MAX_NAME_LENGTH 256
#define MAX_PATH_LENGTH 1024
#define MAX_CHILDREN_COUNT 1000

#ifdef __cplusplus
}
#endif

#endif // SIMPLE_LANGUAGE_DEFINE_H 